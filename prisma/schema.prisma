// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// ====================================================================================
enum FocusArea {
  frontend
  backend
  tester
  system_design
  dsa
}

enum CompanySize {
  startup
  small
  enterprise
}

enum ExperienceLevel {
  junior
  mid
  senior
  lead
}

enum InterviewType { 
  behavioral
  technical
  system_design
} 

enum DifficultyLevel { 
  easy
  medium
  hard
}

enum Duration {
  MIN_15   @map("15")
  MIN_30   @map("30")
  MIN_45   @map("45")
  MIN_60   @map("60")
  MIN_90   @map("90")
  MIN_120  @map("120")
}

enum InterviewMode {
  text_chat
  voice
  video
}

enum JobPosition {
  frontend_developer
  backend_developer
  fullstack_developer
  tester
  system_designer
  data_scientist
  devops_engineer
}




// ====================================================================================

model User{
  id                        String          @id       @default(uuid())
  fullName                  String
  email                     String          @unique
  password                  String
  bio                       String?
  resume                    String?
  verifyCode                String
  image                     String?
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt

  industry                  String[]
  targetRoles               String[]
  experienceLevel           ExperienceLevel
  targetCompanySize         CompanySize
  focusArea                 FocusArea[]

  interviewSessions         InterviewSession[]
}



model InterviewSession{
  id                        String          @id       @default(uuid())
  userId                    String
  user                      User            @relation(fields: [userId], references: [id])
  interviewType             InterviewType
  difficultyLevel           DifficultyLevel
  duration                  Duration
  interviewMode             InterviewMode
  jobPosition               JobPosition
  jobDescription            String
  experienceLevel           ExperienceLevel
  techStack                 String[]
  faceMoveCount             String?
  feedback                  String?
  rating                    String?
  createdAt                 DateTime        @default(now())
  answers                   Question[]
}



model Question{
  id                        String          @id       @default(uuid())
  interviewSessionId        String
  interviewSession          InterviewSession          @relation(fields: [interviewSessionId], references: [id])
  question                  String
  correctAnswer             String
  userAnswer                String 
  feedback                  String
}


